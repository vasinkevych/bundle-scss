"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getImports = exports.getUniqueStyleFiles = exports.removeImports = void 0;
const constants_1 = require("./constants");
const fs_utils_1 = require("./fs-utils");
const path_1 = require("path");
const removeImports = (content, fileType) => {
    const regex = fileType === 'scss' ? constants_1.mainConst.scssImportRegex : constants_1.mainConst.sassImportRegex;
    return content.replace(regex, '');
};
exports.removeImports = removeImports;
const getUniqueStyleFiles = (files, fileExtension) => {
    const imports = files
        .map((file) => {
        let baseDir = path_1.dirname(file);
        return exports.getImports(fs_utils_1.readSync(file), baseDir, fileExtension);
    })
        .reduce((acc, curr) => acc.concat(curr), []);
    const allImports = [...imports, ...files];
    return [...new Set(allImports)];
};
exports.getUniqueStyleFiles = getUniqueStyleFiles;
const getImports = (content, baseDir, fileExtension, imports = []) => {
    const regex = fileExtension === 'scss' ? /@import ['"]([^'"]+)['"];/g : /@import (\S+)/g;
    let match;
    let fileContent = content
        .split('\n')
        .filter((line) => !/^\/\/|^\/\*|^\*/.test(line.trim()))
        .join('\n');
    while ((match = regex.exec(fileContent)) !== null) {
        const pathFile = fs_utils_1.defineExtension(path_1.join(baseDir, match[1]), fileExtension);
        imports.push(pathFile);
        exports.getImports(fs_utils_1.readSync(pathFile), path_1.dirname(pathFile), fileExtension, imports);
    }
    return imports;
};
exports.getImports = getImports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1jb250ZW50LXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlcnMvZmlsZS1jb250ZW50LXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUF3QztBQUN4Qyx5Q0FBdUQ7QUFDdkQsK0JBQXFDO0FBRTlCLE1BQU0sYUFBYSxHQUFHLENBQUMsT0FBZSxFQUFFLFFBQWdCLEVBQUUsRUFBRTtJQUNqRSxNQUFNLEtBQUssR0FDVCxRQUFRLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxxQkFBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMscUJBQVMsQ0FBQyxlQUFlLENBQUM7SUFDOUUsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNwQyxDQUFDLENBQUM7QUFKVyxRQUFBLGFBQWEsaUJBSXhCO0FBRUssTUFBTSxtQkFBbUIsR0FBRyxDQUNqQyxLQUFvQixFQUNwQixhQUFxQixFQUNyQixFQUFFO0lBQ0YsTUFBTSxPQUFPLEdBQUcsS0FBSztTQUNsQixHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNaLElBQUksT0FBTyxHQUFHLGNBQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixPQUFPLGtCQUFVLENBQUMsbUJBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDNUQsQ0FBQyxDQUFDO1NBQ0QsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMvQyxNQUFNLFVBQVUsR0FBRyxDQUFDLEdBQUcsT0FBTyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUM7SUFFMUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUM7QUFiVyxRQUFBLG1CQUFtQix1QkFhOUI7QUFFSyxNQUFNLFVBQVUsR0FBRyxDQUN4QixPQUFlLEVBQ2YsT0FBZSxFQUNmLGFBQXFCLEVBQ3JCLFVBQXlCLEVBQUUsRUFDM0IsRUFBRTtJQUNGLE1BQU0sS0FBSyxHQUNULGFBQWEsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQztJQUM3RSxJQUFJLEtBQUssQ0FBQztJQUNWLElBQUksV0FBVyxHQUFHLE9BQU87U0FDdEIsS0FBSyxDQUFDLElBQUksQ0FBQztTQUNYLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7U0FDdEQsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWQsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ2pELE1BQU0sUUFBUSxHQUFHLDBCQUFlLENBQUMsV0FBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN6RSxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZCLGtCQUFVLENBQUMsbUJBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxjQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQzNFO0lBRUQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBckJXLFFBQUEsVUFBVSxjQXFCckIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYWluQ29uc3QgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkZWZpbmVFeHRlbnNpb24sIHJlYWRTeW5jIH0gZnJvbSAnLi9mcy11dGlscyc7XG5pbXBvcnQgeyBkaXJuYW1lLCBqb2luIH0gZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBjb25zdCByZW1vdmVJbXBvcnRzID0gKGNvbnRlbnQ6IHN0cmluZywgZmlsZVR5cGU6IHN0cmluZykgPT4ge1xuICBjb25zdCByZWdleCA9XG4gICAgZmlsZVR5cGUgPT09ICdzY3NzJyA/IG1haW5Db25zdC5zY3NzSW1wb3J0UmVnZXggOiBtYWluQ29uc3Quc2Fzc0ltcG9ydFJlZ2V4O1xuICByZXR1cm4gY29udGVudC5yZXBsYWNlKHJlZ2V4LCAnJyk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0VW5pcXVlU3R5bGVGaWxlcyA9IChcbiAgZmlsZXM6IEFycmF5PHN0cmluZz4sXG4gIGZpbGVFeHRlbnNpb246IHN0cmluZ1xuKSA9PiB7XG4gIGNvbnN0IGltcG9ydHMgPSBmaWxlc1xuICAgIC5tYXAoKGZpbGUpID0+IHtcbiAgICAgIGxldCBiYXNlRGlyID0gZGlybmFtZShmaWxlKTtcbiAgICAgIHJldHVybiBnZXRJbXBvcnRzKHJlYWRTeW5jKGZpbGUpLCBiYXNlRGlyLCBmaWxlRXh0ZW5zaW9uKTtcbiAgICB9KVxuICAgIC5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjLmNvbmNhdChjdXJyKSwgW10pO1xuICBjb25zdCBhbGxJbXBvcnRzID0gWy4uLmltcG9ydHMsIC4uLmZpbGVzXTtcblxuICByZXR1cm4gWy4uLm5ldyBTZXQoYWxsSW1wb3J0cyldO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEltcG9ydHMgPSAoXG4gIGNvbnRlbnQ6IHN0cmluZyxcbiAgYmFzZURpcjogc3RyaW5nLFxuICBmaWxlRXh0ZW5zaW9uOiBzdHJpbmcsXG4gIGltcG9ydHM6IEFycmF5PHN0cmluZz4gPSBbXVxuKSA9PiB7XG4gIGNvbnN0IHJlZ2V4ID1cbiAgICBmaWxlRXh0ZW5zaW9uID09PSAnc2NzcycgPyAvQGltcG9ydCBbJ1wiXShbXidcIl0rKVsnXCJdOy9nIDogL0BpbXBvcnQgKFxcUyspL2c7XG4gIGxldCBtYXRjaDtcbiAgbGV0IGZpbGVDb250ZW50ID0gY29udGVudFxuICAgIC5zcGxpdCgnXFxuJylcbiAgICAuZmlsdGVyKChsaW5lKSA9PiAhL15cXC9cXC98XlxcL1xcKnxeXFwqLy50ZXN0KGxpbmUudHJpbSgpKSlcbiAgICAuam9pbignXFxuJyk7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHJlZ2V4LmV4ZWMoZmlsZUNvbnRlbnQpKSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHBhdGhGaWxlID0gZGVmaW5lRXh0ZW5zaW9uKGpvaW4oYmFzZURpciwgbWF0Y2hbMV0pLCBmaWxlRXh0ZW5zaW9uKTtcbiAgICBpbXBvcnRzLnB1c2gocGF0aEZpbGUpO1xuICAgIGdldEltcG9ydHMocmVhZFN5bmMocGF0aEZpbGUpLCBkaXJuYW1lKHBhdGhGaWxlKSwgZmlsZUV4dGVuc2lvbiwgaW1wb3J0cyk7XG4gIH1cblxuICByZXR1cm4gaW1wb3J0cztcbn07XG4iXX0=