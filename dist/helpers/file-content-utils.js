"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
const fs_utils_1 = require("./fs-utils");
const path_1 = require("path");
const logger_1 = require("./logger");
exports.removeImports = (content, fileType) => {
    const regex = fileType === 'scss' ? constants_1.mainConst.scssImportRegex : constants_1.mainConst.sassImportRegex;
    return content.replace(regex, '');
};
exports.getUniqueStyleFiles = (files, fileExtension) => {
    const imports = files
        .map(file => {
        logger_1.logger(file);
        logger_1.logger(typeof file);
        let baseDir = path_1.dirname(file);
        return exports.getImports(fs_utils_1.readSync(file), baseDir, fileExtension);
    })
        .reduce((acc, curr) => acc.concat(curr), []);
    const allImports = [...imports, ...files];
    return [...new Set(allImports)];
};
exports.getImports = (content, baseDir, fileExtension, imports = []) => {
    const regex = fileExtension === 'scss' ? /@import ['"]([^'"]+)['"];/g : /@import (\S+)/g;
    let match;
    while ((match = regex.exec(content)) !== null) {
        const pathFile = fs_utils_1.defineExtension(path_1.join(baseDir, match[1]), fileExtension);
        imports.push(pathFile);
        exports.getImports(fs_utils_1.readSync(pathFile), path_1.dirname(pathFile), fileExtension, imports);
    }
    return imports;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1jb250ZW50LXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlcnMvZmlsZS1jb250ZW50LXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQXdDO0FBQ3hDLHlDQUF1RDtBQUN2RCwrQkFBcUM7QUFDckMscUNBQWtDO0FBRXJCLFFBQUEsYUFBYSxHQUFHLENBQUMsT0FBZSxFQUFFLFFBQWdCLEVBQUUsRUFBRTtJQUNqRSxNQUFNLEtBQUssR0FDVCxRQUFRLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxxQkFBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMscUJBQVMsQ0FBQyxlQUFlLENBQUM7SUFDOUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3BDLENBQUMsQ0FBQztBQUVXLFFBQUEsbUJBQW1CLEdBQUcsQ0FDakMsS0FBb0IsRUFDcEIsYUFBcUIsRUFDckIsRUFBRTtJQUNGLE1BQU0sT0FBTyxHQUFHLEtBQUs7U0FDbEIsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ1YsZUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2IsZUFBTSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUM7UUFDcEIsSUFBSSxPQUFPLEdBQUcsY0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxrQkFBVSxDQUFDLG1CQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzVELENBQUMsQ0FBQztTQUNELE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDL0MsTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUFHLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBRTFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUM7QUFFVyxRQUFBLFVBQVUsR0FBRyxDQUN4QixPQUFlLEVBQ2YsT0FBZSxFQUNmLGFBQXFCLEVBQ3JCLFVBQXlCLEVBQUUsRUFDM0IsRUFBRTtJQUNGLE1BQU0sS0FBSyxHQUNULGFBQWEsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQztJQUM3RSxJQUFJLEtBQUssQ0FBQztJQUNWLE9BQU8sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO1FBQzlDLE1BQU0sUUFBUSxHQUFHLDBCQUFlLENBQUMsV0FBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN6RSxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZCLGtCQUFVLENBQUMsbUJBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxjQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDO0FBQ2pCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1haW5Db25zdCB9IGZyb20gJy4vY29uc3RhbnRzJztcclxuaW1wb3J0IHsgZGVmaW5lRXh0ZW5zaW9uLCByZWFkU3luYyB9IGZyb20gJy4vZnMtdXRpbHMnO1xyXG5pbXBvcnQgeyBkaXJuYW1lLCBqb2luIH0gZnJvbSAncGF0aCc7XHJcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcclxuXHJcbmV4cG9ydCBjb25zdCByZW1vdmVJbXBvcnRzID0gKGNvbnRlbnQ6IHN0cmluZywgZmlsZVR5cGU6IHN0cmluZykgPT4ge1xyXG4gIGNvbnN0IHJlZ2V4ID1cclxuICAgIGZpbGVUeXBlID09PSAnc2NzcycgPyBtYWluQ29uc3Quc2Nzc0ltcG9ydFJlZ2V4IDogbWFpbkNvbnN0LnNhc3NJbXBvcnRSZWdleDtcclxuICByZXR1cm4gY29udGVudC5yZXBsYWNlKHJlZ2V4LCAnJyk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0VW5pcXVlU3R5bGVGaWxlcyA9IChcclxuICBmaWxlczogQXJyYXk8c3RyaW5nPixcclxuICBmaWxlRXh0ZW5zaW9uOiBzdHJpbmdcclxuKSA9PiB7XHJcbiAgY29uc3QgaW1wb3J0cyA9IGZpbGVzXHJcbiAgICAubWFwKGZpbGUgPT4ge1xyXG4gICAgICBsb2dnZXIoZmlsZSk7XHJcbiAgICAgIGxvZ2dlcih0eXBlb2YgZmlsZSk7XHJcbiAgICAgIGxldCBiYXNlRGlyID0gZGlybmFtZShmaWxlKTtcclxuICAgICAgcmV0dXJuIGdldEltcG9ydHMocmVhZFN5bmMoZmlsZSksIGJhc2VEaXIsIGZpbGVFeHRlbnNpb24pO1xyXG4gICAgfSlcclxuICAgIC5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjLmNvbmNhdChjdXJyKSwgW10pO1xyXG4gIGNvbnN0IGFsbEltcG9ydHMgPSBbLi4uaW1wb3J0cywgLi4uZmlsZXNdO1xyXG5cclxuICByZXR1cm4gWy4uLm5ldyBTZXQoYWxsSW1wb3J0cyldO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEltcG9ydHMgPSAoXHJcbiAgY29udGVudDogc3RyaW5nLFxyXG4gIGJhc2VEaXI6IHN0cmluZyxcclxuICBmaWxlRXh0ZW5zaW9uOiBzdHJpbmcsXHJcbiAgaW1wb3J0czogQXJyYXk8c3RyaW5nPiA9IFtdXHJcbikgPT4ge1xyXG4gIGNvbnN0IHJlZ2V4ID1cclxuICAgIGZpbGVFeHRlbnNpb24gPT09ICdzY3NzJyA/IC9AaW1wb3J0IFsnXCJdKFteJ1wiXSspWydcIl07L2cgOiAvQGltcG9ydCAoXFxTKykvZztcclxuICBsZXQgbWF0Y2g7XHJcbiAgd2hpbGUgKChtYXRjaCA9IHJlZ2V4LmV4ZWMoY29udGVudCkpICE9PSBudWxsKSB7XHJcbiAgICBjb25zdCBwYXRoRmlsZSA9IGRlZmluZUV4dGVuc2lvbihqb2luKGJhc2VEaXIsIG1hdGNoWzFdKSwgZmlsZUV4dGVuc2lvbik7XHJcbiAgICBpbXBvcnRzLnB1c2gocGF0aEZpbGUpO1xyXG4gICAgZ2V0SW1wb3J0cyhyZWFkU3luYyhwYXRoRmlsZSksIGRpcm5hbWUocGF0aEZpbGUpLCBmaWxlRXh0ZW5zaW9uLCBpbXBvcnRzKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBpbXBvcnRzO1xyXG59O1xyXG4iXX0=