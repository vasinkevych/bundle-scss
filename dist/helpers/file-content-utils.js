"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
const fs_utils_1 = require("./fs-utils");
const path_1 = require("path");
exports.removeImports = (content, fileType) => {
    const regex = fileType === 'scss' ? constants_1.mainConst.scssImportRegex : constants_1.mainConst.sassImportRegex;
    return content.replace(regex, '');
};
exports.getUniqueStyleFiles = (files, fileExtension) => {
    const imports = files
        .map(file => {
        let baseDir = path_1.dirname(file);
        return exports.getImports(fs_utils_1.readSync(file), baseDir, fileExtension);
    })
        .reduce((acc, curr) => acc.concat(curr), []);
    const allImports = [...imports, ...files];
    return [...new Set(allImports)];
};
exports.getImports = (content, baseDir, fileExtension, imports = []) => {
    const regex = fileExtension === 'scss'
        ? /@import ['"]([^'"]+)['"];/g
        : /@import ['"]([^'"]+)['"]/g;
    let match;
    while ((match = regex.exec(content)) !== null) {
        const pathFile = fs_utils_1.defineExtension(path_1.join(baseDir, match[1]), fileExtension);
        imports.push(pathFile);
        exports.getImports(fs_utils_1.readSync(pathFile), path_1.dirname(pathFile), fileExtension, imports);
    }
    return imports;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1jb250ZW50LXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlcnMvZmlsZS1jb250ZW50LXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQXdDO0FBQ3hDLHlDQUF1RDtBQUN2RCwrQkFBcUM7QUFFeEIsUUFBQSxhQUFhLEdBQUcsQ0FBQyxPQUFlLEVBQUUsUUFBZ0IsRUFBRSxFQUFFO0lBQ2pFLE1BQU0sS0FBSyxHQUNULFFBQVEsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLHFCQUFTLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxxQkFBUyxDQUFDLGVBQWUsQ0FBQztJQUM5RSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3BDLENBQUMsQ0FBQztBQUVXLFFBQUEsbUJBQW1CLEdBQUcsQ0FDakMsS0FBb0IsRUFDcEIsYUFBcUIsRUFDckIsRUFBRTtJQUNGLE1BQU0sT0FBTyxHQUFHLEtBQUs7U0FDbEIsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ1YsSUFBSSxPQUFPLEdBQUcsY0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLE9BQU8sa0JBQVUsQ0FBQyxtQkFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUM7U0FDRCxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sVUFBVSxHQUFHLENBQUMsR0FBRyxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUUxQyxPQUFPLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVXLFFBQUEsVUFBVSxHQUFHLENBQ3hCLE9BQWUsRUFDZixPQUFlLEVBQ2YsYUFBcUIsRUFDckIsVUFBeUIsRUFBRSxFQUMzQixFQUFFO0lBQ0YsTUFBTSxLQUFLLEdBQ1QsYUFBYSxLQUFLLE1BQU07UUFDdEIsQ0FBQyxDQUFDLDRCQUE0QjtRQUM5QixDQUFDLENBQUMsMkJBQTJCLENBQUM7SUFDbEMsSUFBSSxLQUFLLENBQUM7SUFDVixPQUFPLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDN0MsTUFBTSxRQUFRLEdBQUcsMEJBQWUsQ0FBQyxXQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3pFLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkIsa0JBQVUsQ0FBQyxtQkFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLGNBQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDM0U7SUFFRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYWluQ29uc3QgfSBmcm9tICcuL2NvbnN0YW50cyc7XHJcbmltcG9ydCB7IGRlZmluZUV4dGVuc2lvbiwgcmVhZFN5bmMgfSBmcm9tICcuL2ZzLXV0aWxzJztcclxuaW1wb3J0IHsgZGlybmFtZSwgam9pbiB9IGZyb20gJ3BhdGgnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZUltcG9ydHMgPSAoY29udGVudDogc3RyaW5nLCBmaWxlVHlwZTogc3RyaW5nKSA9PiB7XHJcbiAgY29uc3QgcmVnZXggPVxyXG4gICAgZmlsZVR5cGUgPT09ICdzY3NzJyA/IG1haW5Db25zdC5zY3NzSW1wb3J0UmVnZXggOiBtYWluQ29uc3Quc2Fzc0ltcG9ydFJlZ2V4O1xyXG4gIHJldHVybiBjb250ZW50LnJlcGxhY2UocmVnZXgsICcnKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRVbmlxdWVTdHlsZUZpbGVzID0gKFxyXG4gIGZpbGVzOiBBcnJheTxzdHJpbmc+LFxyXG4gIGZpbGVFeHRlbnNpb246IHN0cmluZ1xyXG4pID0+IHtcclxuICBjb25zdCBpbXBvcnRzID0gZmlsZXNcclxuICAgIC5tYXAoZmlsZSA9PiB7XHJcbiAgICAgIGxldCBiYXNlRGlyID0gZGlybmFtZShmaWxlKTtcclxuICAgICAgcmV0dXJuIGdldEltcG9ydHMocmVhZFN5bmMoZmlsZSksIGJhc2VEaXIsIGZpbGVFeHRlbnNpb24pO1xyXG4gICAgfSlcclxuICAgIC5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjLmNvbmNhdChjdXJyKSwgW10pO1xyXG4gIGNvbnN0IGFsbEltcG9ydHMgPSBbLi4uaW1wb3J0cywgLi4uZmlsZXNdO1xyXG5cclxuICByZXR1cm4gWy4uLm5ldyBTZXQoYWxsSW1wb3J0cyldO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldEltcG9ydHMgPSAoXHJcbiAgY29udGVudDogc3RyaW5nLFxyXG4gIGJhc2VEaXI6IHN0cmluZyxcclxuICBmaWxlRXh0ZW5zaW9uOiBzdHJpbmcsXHJcbiAgaW1wb3J0czogQXJyYXk8c3RyaW5nPiA9IFtdXHJcbikgPT4ge1xyXG4gIGNvbnN0IHJlZ2V4ID1cclxuICAgIGZpbGVFeHRlbnNpb24gPT09ICdzY3NzJ1xyXG4gICAgICA/IC9AaW1wb3J0IFsnXCJdKFteJ1wiXSspWydcIl07L2dcclxuICAgICAgOiAvQGltcG9ydCBbJ1wiXShbXidcIl0rKVsnXCJdL2c7XHJcbiAgbGV0IG1hdGNoO1xyXG4gIHdoaWxlICgobWF0Y2ggPSByZWdleC5leGVjKGNvbnRlbnQpKSAhPT0gbnVsbCkge1xyXG4gICAgY29uc3QgcGF0aEZpbGUgPSBkZWZpbmVFeHRlbnNpb24oam9pbihiYXNlRGlyLCBtYXRjaFsxXSksIGZpbGVFeHRlbnNpb24pO1xyXG4gICAgaW1wb3J0cy5wdXNoKHBhdGhGaWxlKTtcclxuICAgIGdldEltcG9ydHMocmVhZFN5bmMocGF0aEZpbGUpLCBkaXJuYW1lKHBhdGhGaWxlKSwgZmlsZUV4dGVuc2lvbiwgaW1wb3J0cyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gaW1wb3J0cztcclxufTtcclxuIl19