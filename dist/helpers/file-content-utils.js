"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
const fs_utils_1 = require("./fs-utils");
const path_1 = require("path");
exports.removeImports = (content, fileType) => {
    const regex = fileType === 'scss' ? constants_1.mainConst.scssImportRegex : constants_1.mainConst.sassImportRegex;
    return content.replace(regex, '');
};
exports.getUniqueStyleFiles = (files, fileExtension) => {
    const imports = files
        .map(file => {
        let baseDir = path_1.dirname(file);
        return exports.getImports(fs_utils_1.readSync(file), baseDir, fileExtension);
    })
        .reduce((acc, curr) => acc.concat(curr), []);
    const allImports = [...imports, ...files];
    return [...new Set(allImports)];
};
exports.getImports = (content, baseDir, fileExtension, imports = []) => {
    const regex = fileExtension === 'scss' ? /@import ['"]([^'"]+)['"];/g : /@import (\S+)/g;
    let match;
    let fileContent = content
        .split('\n')
        .filter(line => !/^\/\/|^\/\*|^\*/.test(line.trim()))
        .join('\n');
    while ((match = regex.exec(fileContent)) !== null) {
        const pathFile = fs_utils_1.defineExtension(path_1.join(baseDir, match[1]), fileExtension);
        imports.push(pathFile);
        exports.getImports(fs_utils_1.readSync(pathFile), path_1.dirname(pathFile), fileExtension, imports);
    }
    return imports;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1jb250ZW50LXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlcnMvZmlsZS1jb250ZW50LXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQXdDO0FBQ3hDLHlDQUF1RDtBQUN2RCwrQkFBcUM7QUFFeEIsUUFBQSxhQUFhLEdBQUcsQ0FBQyxPQUFlLEVBQUUsUUFBZ0IsRUFBRSxFQUFFO0lBQ2pFLE1BQU0sS0FBSyxHQUNULFFBQVEsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLHFCQUFTLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxxQkFBUyxDQUFDLGVBQWUsQ0FBQztJQUM5RSxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3BDLENBQUMsQ0FBQztBQUVXLFFBQUEsbUJBQW1CLEdBQUcsQ0FDakMsS0FBb0IsRUFDcEIsYUFBcUIsRUFDckIsRUFBRTtJQUNGLE1BQU0sT0FBTyxHQUFHLEtBQUs7U0FDbEIsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ1YsSUFBSSxPQUFPLEdBQUcsY0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLE9BQU8sa0JBQVUsQ0FBQyxtQkFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM1RCxDQUFDLENBQUM7U0FDRCxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sVUFBVSxHQUFHLENBQUMsR0FBRyxPQUFPLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQztJQUUxQyxPQUFPLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLENBQUMsQ0FBQztBQUVXLFFBQUEsVUFBVSxHQUFHLENBQ3hCLE9BQWUsRUFDZixPQUFlLEVBQ2YsYUFBcUIsRUFDckIsVUFBeUIsRUFBRSxFQUMzQixFQUFFO0lBQ0YsTUFBTSxLQUFLLEdBQ1QsYUFBYSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDO0lBQzdFLElBQUksS0FBSyxDQUFDO0lBQ1YsSUFBSSxXQUFXLEdBQUcsT0FBTztTQUN0QixLQUFLLENBQUMsSUFBSSxDQUFDO1NBQ1gsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7U0FDcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWQsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ2pELE1BQU0sUUFBUSxHQUFHLDBCQUFlLENBQUMsV0FBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN6RSxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZCLGtCQUFVLENBQUMsbUJBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxjQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQzNFO0lBRUQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFpbkNvbnN0IH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZGVmaW5lRXh0ZW5zaW9uLCByZWFkU3luYyB9IGZyb20gJy4vZnMtdXRpbHMnO1xuaW1wb3J0IHsgZGlybmFtZSwgam9pbiB9IGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgY29uc3QgcmVtb3ZlSW1wb3J0cyA9IChjb250ZW50OiBzdHJpbmcsIGZpbGVUeXBlOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgcmVnZXggPVxuICAgIGZpbGVUeXBlID09PSAnc2NzcycgPyBtYWluQ29uc3Quc2Nzc0ltcG9ydFJlZ2V4IDogbWFpbkNvbnN0LnNhc3NJbXBvcnRSZWdleDtcbiAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZShyZWdleCwgJycpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldFVuaXF1ZVN0eWxlRmlsZXMgPSAoXG4gIGZpbGVzOiBBcnJheTxzdHJpbmc+LFxuICBmaWxlRXh0ZW5zaW9uOiBzdHJpbmdcbikgPT4ge1xuICBjb25zdCBpbXBvcnRzID0gZmlsZXNcbiAgICAubWFwKGZpbGUgPT4ge1xuICAgICAgbGV0IGJhc2VEaXIgPSBkaXJuYW1lKGZpbGUpO1xuICAgICAgcmV0dXJuIGdldEltcG9ydHMocmVhZFN5bmMoZmlsZSksIGJhc2VEaXIsIGZpbGVFeHRlbnNpb24pO1xuICAgIH0pXG4gICAgLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBhY2MuY29uY2F0KGN1cnIpLCBbXSk7XG4gIGNvbnN0IGFsbEltcG9ydHMgPSBbLi4uaW1wb3J0cywgLi4uZmlsZXNdO1xuXG4gIHJldHVybiBbLi4ubmV3IFNldChhbGxJbXBvcnRzKV07XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0SW1wb3J0cyA9IChcbiAgY29udGVudDogc3RyaW5nLFxuICBiYXNlRGlyOiBzdHJpbmcsXG4gIGZpbGVFeHRlbnNpb246IHN0cmluZyxcbiAgaW1wb3J0czogQXJyYXk8c3RyaW5nPiA9IFtdXG4pID0+IHtcbiAgY29uc3QgcmVnZXggPVxuICAgIGZpbGVFeHRlbnNpb24gPT09ICdzY3NzJyA/IC9AaW1wb3J0IFsnXCJdKFteJ1wiXSspWydcIl07L2cgOiAvQGltcG9ydCAoXFxTKykvZztcbiAgbGV0IG1hdGNoO1xuICBsZXQgZmlsZUNvbnRlbnQgPSBjb250ZW50XG4gICAgLnNwbGl0KCdcXG4nKVxuICAgIC5maWx0ZXIobGluZSA9PiAhL15cXC9cXC98XlxcL1xcKnxeXFwqLy50ZXN0KGxpbmUudHJpbSgpKSlcbiAgICAuam9pbignXFxuJyk7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHJlZ2V4LmV4ZWMoZmlsZUNvbnRlbnQpKSAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHBhdGhGaWxlID0gZGVmaW5lRXh0ZW5zaW9uKGpvaW4oYmFzZURpciwgbWF0Y2hbMV0pLCBmaWxlRXh0ZW5zaW9uKTtcbiAgICBpbXBvcnRzLnB1c2gocGF0aEZpbGUpO1xuICAgIGdldEltcG9ydHMocmVhZFN5bmMocGF0aEZpbGUpLCBkaXJuYW1lKHBhdGhGaWxlKSwgZmlsZUV4dGVuc2lvbiwgaW1wb3J0cyk7XG4gIH1cblxuICByZXR1cm4gaW1wb3J0cztcbn07XG4iXX0=