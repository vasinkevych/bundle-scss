"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_utils_1 = require("./fs-utils");
const path_1 = require("path");
const constants_1 = require("./constants");
const logger_1 = require("./logger");
class Params {
    constructor(mask, dest, sort, config) {
        this.mask = mask;
        this.dest = dest;
        this.sort = sort || constants_1.mainConst.defaultPriority;
        this.packageConf = config
            ? this.readJson(path_1.join(fs_utils_1.cwDir(), constants_1.mainConst.packageJsonFile))
            : {};
        this.bundleConf = config
            ? this.readJson(path_1.join(fs_utils_1.cwDir(), constants_1.mainConst.bundleConfFile))
            : {};
        this.mergedParams = this.mergeParam();
    }
    compareOutputInputExtensions(param) {
        const maskExtension = Array.isArray(param.mask)
            ? param.mask.map(el => fs_utils_1.fileType(el))
            : [fs_utils_1.fileType(param.mask)];
        return maskExtension.every(el => el === fs_utils_1.fileType(param.dest));
    }
    readJson(filePath) {
        if (fs_utils_1.isFile(filePath)) {
            logger_1.logger(`Reading params from ${filePath}`);
            return JSON.parse(fs_utils_1.readSync(filePath));
        }
        logger_1.logger(`${filePath} not found`);
        return {};
    }
    mergeParam() {
        const packageConf = this.packageConf.bundleStyle
            ? this.packageConf.bundleStyle
            : {};
        const param = Object.assign({ mask: this.mask, dest: this.dest, sort: this.sort }, packageConf, this.bundleConf);
        if (!this.compareOutputInputExtensions(param)) {
            logger_1.logger('File extensions mask and dest should be the same');
        }
        return param;
    }
    get param() {
        return this.mergedParams;
    }
}
exports.Params = Params;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGFyYW1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlcnMvUGFyYW1zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQStEO0FBQy9ELCtCQUE0QjtBQUM1QiwyQ0FBd0M7QUFDeEMscUNBQWtDO0FBR2xDLE1BQWEsTUFBTTtJQVVqQixZQUNFLElBQTRCLEVBQzVCLElBQVksRUFDWixJQUE0QixFQUM1QixNQUFlO1FBRWYsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUkscUJBQVMsQ0FBQyxlQUFlLENBQUM7UUFDOUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxNQUFNO1lBQ3ZCLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQUksQ0FBQyxnQkFBSyxFQUFFLEVBQUUscUJBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUN6RCxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ1AsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNO1lBQ3RCLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQUksQ0FBQyxnQkFBSyxFQUFFLEVBQUUscUJBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUN4RCxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ1AsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVELDRCQUE0QixDQUFDLEtBQWM7UUFDekMsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQzdDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLG1CQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDcEMsQ0FBQyxDQUFDLENBQUMsbUJBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMzQixPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssbUJBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRU8sUUFBUSxDQUFDLFFBQWdCO1FBQy9CLElBQUksaUJBQU0sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUNwQixlQUFNLENBQUMsdUJBQXVCLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDMUMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztTQUN2QztRQUNELGVBQU0sQ0FBQyxHQUFHLFFBQVEsWUFBWSxDQUFDLENBQUM7UUFDaEMsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRU8sVUFBVTtRQUNoQixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVc7WUFDOUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVztZQUM5QixDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ1AsTUFBTSxLQUFLLG1CQUNULElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxJQUNaLFdBQVcsRUFDWCxJQUFJLENBQUMsVUFBVSxDQUNuQixDQUFDO1FBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM3QyxlQUFNLENBQUMsa0RBQWtELENBQUMsQ0FBQztTQUM1RDtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0NBQ0Y7QUFoRUQsd0JBZ0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3dEaXIsIGZpbGVUeXBlLCBpc0ZpbGUsIHJlYWRTeW5jIH0gZnJvbSAnLi9mcy11dGlscyc7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBtYWluQ29uc3QgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBJUGFyYW1zIH0gZnJvbSAnLi4vaW50ZXJmYWNlL0lQYXJhbXMnO1xuXG5leHBvcnQgY2xhc3MgUGFyYW1zIHtcbiAgcHJpdmF0ZSBtYXNrOiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nO1xuICBwcml2YXRlIGRlc3Q6IHN0cmluZztcbiAgcHJpdmF0ZSBzb3J0OiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nO1xuICBwcml2YXRlIHBhY2thZ2VDb25mOiB7XG4gICAgYnVuZGxlU3R5bGU/OiBJUGFyYW1zO1xuICB9O1xuICBwcml2YXRlIGJ1bmRsZUNvbmY6IElQYXJhbXM7XG4gIHByaXZhdGUgbWVyZ2VkUGFyYW1zOiBJUGFyYW1zO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIG1hc2s6IEFycmF5PHN0cmluZz4gfCBzdHJpbmcsXG4gICAgZGVzdDogc3RyaW5nLFxuICAgIHNvcnQ6IEFycmF5PHN0cmluZz4gfCBzdHJpbmcsXG4gICAgY29uZmlnOiBib29sZWFuXG4gICkge1xuICAgIHRoaXMubWFzayA9IG1hc2s7XG4gICAgdGhpcy5kZXN0ID0gZGVzdDtcbiAgICB0aGlzLnNvcnQgPSBzb3J0IHx8IG1haW5Db25zdC5kZWZhdWx0UHJpb3JpdHk7XG4gICAgdGhpcy5wYWNrYWdlQ29uZiA9IGNvbmZpZ1xuICAgICAgPyB0aGlzLnJlYWRKc29uKGpvaW4oY3dEaXIoKSwgbWFpbkNvbnN0LnBhY2thZ2VKc29uRmlsZSkpXG4gICAgICA6IHt9O1xuICAgIHRoaXMuYnVuZGxlQ29uZiA9IGNvbmZpZ1xuICAgICAgPyB0aGlzLnJlYWRKc29uKGpvaW4oY3dEaXIoKSwgbWFpbkNvbnN0LmJ1bmRsZUNvbmZGaWxlKSlcbiAgICAgIDoge307XG4gICAgdGhpcy5tZXJnZWRQYXJhbXMgPSB0aGlzLm1lcmdlUGFyYW0oKTtcbiAgfVxuXG4gIGNvbXBhcmVPdXRwdXRJbnB1dEV4dGVuc2lvbnMocGFyYW06IElQYXJhbXMpOiBib29sZWFuIHtcbiAgICBjb25zdCBtYXNrRXh0ZW5zaW9uID0gQXJyYXkuaXNBcnJheShwYXJhbS5tYXNrKVxuICAgICAgPyBwYXJhbS5tYXNrLm1hcChlbCA9PiBmaWxlVHlwZShlbCkpXG4gICAgICA6IFtmaWxlVHlwZShwYXJhbS5tYXNrKV07XG4gICAgcmV0dXJuIG1hc2tFeHRlbnNpb24uZXZlcnkoZWwgPT4gZWwgPT09IGZpbGVUeXBlKHBhcmFtLmRlc3QpKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVhZEpzb24oZmlsZVBhdGg6IHN0cmluZykge1xuICAgIGlmIChpc0ZpbGUoZmlsZVBhdGgpKSB7XG4gICAgICBsb2dnZXIoYFJlYWRpbmcgcGFyYW1zIGZyb20gJHtmaWxlUGF0aH1gKTtcbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHJlYWRTeW5jKGZpbGVQYXRoKSk7XG4gICAgfVxuICAgIGxvZ2dlcihgJHtmaWxlUGF0aH0gbm90IGZvdW5kYCk7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgcHJpdmF0ZSBtZXJnZVBhcmFtKCk6IElQYXJhbXMge1xuICAgIGNvbnN0IHBhY2thZ2VDb25mID0gdGhpcy5wYWNrYWdlQ29uZi5idW5kbGVTdHlsZVxuICAgICAgPyB0aGlzLnBhY2thZ2VDb25mLmJ1bmRsZVN0eWxlXG4gICAgICA6IHt9O1xuICAgIGNvbnN0IHBhcmFtID0ge1xuICAgICAgbWFzazogdGhpcy5tYXNrLFxuICAgICAgZGVzdDogdGhpcy5kZXN0LFxuICAgICAgc29ydDogdGhpcy5zb3J0LFxuICAgICAgLi4ucGFja2FnZUNvbmYsXG4gICAgICAuLi50aGlzLmJ1bmRsZUNvbmYsXG4gICAgfTtcbiAgICBpZiAoIXRoaXMuY29tcGFyZU91dHB1dElucHV0RXh0ZW5zaW9ucyhwYXJhbSkpIHtcbiAgICAgIGxvZ2dlcignRmlsZSBleHRlbnNpb25zIG1hc2sgYW5kIGRlc3Qgc2hvdWxkIGJlIHRoZSBzYW1lJyk7XG4gICAgfVxuICAgIHJldHVybiBwYXJhbTtcbiAgfVxuXG4gIGdldCBwYXJhbSgpIHtcbiAgICByZXR1cm4gdGhpcy5tZXJnZWRQYXJhbXM7XG4gIH1cbn1cbiJdfQ==