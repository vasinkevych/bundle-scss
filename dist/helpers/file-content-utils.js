"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
const fs_utils_1 = require("./fs-utils");
const path_1 = require("path");
const logger_1 = require("./logger");
exports.removeImports = (content, fileType) => {
    const regex = fileType === 'scss' ? constants_1.mainConst.scssImportRegex : constants_1.mainConst.sassImportRegex;
    return content.replace(regex, '');
};
exports.getUniqueStyleFiles = (files, fileExtension) => {
    const imports = files
        .map(file => {
        logger_1.logger(file);
        logger_1.logger(typeof file);
        let baseDir = path_1.dirname(file);
        return exports.getImports(fs_utils_1.readSync(file), baseDir, fileExtension);
    })
        .reduce((acc, curr) => acc.concat(curr), []);
    const allImports = [...imports, ...files];
    return [...new Set(allImports)];
};
exports.getImports = (content, baseDir, fileExtension, imports = []) => {
    const regex = fileExtension === 'scss'
        ? /@import ['"]([^'"]+)['"];/g
        : /@import (\S+)/g;
    let match;
    while ((match = regex.exec(content)) !== null) {
        const pathFile = fs_utils_1.defineExtension(path_1.join(baseDir, match[1]), fileExtension);
        imports.push(pathFile);
        exports.getImports(fs_utils_1.readSync(pathFile), path_1.dirname(pathFile), fileExtension, imports);
    }
    return imports;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1jb250ZW50LXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2hlbHBlcnMvZmlsZS1jb250ZW50LXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQXdDO0FBQ3hDLHlDQUF1RDtBQUN2RCwrQkFBcUM7QUFDckMscUNBQWtDO0FBRXJCLFFBQUEsYUFBYSxHQUFHLENBQUMsT0FBZSxFQUFFLFFBQWdCLEVBQUUsRUFBRTtJQUNqRSxNQUFNLEtBQUssR0FDVCxRQUFRLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxxQkFBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMscUJBQVMsQ0FBQyxlQUFlLENBQUM7SUFDOUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3BDLENBQUMsQ0FBQztBQUVXLFFBQUEsbUJBQW1CLEdBQUcsQ0FDakMsS0FBb0IsRUFDcEIsYUFBcUIsRUFDckIsRUFBRTtJQUNGLE1BQU0sT0FBTyxHQUFHLEtBQUs7U0FDbEIsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ1YsZUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2IsZUFBTSxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUM7UUFDcEIsSUFBSSxPQUFPLEdBQUcsY0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLE1BQU0sQ0FBQyxrQkFBVSxDQUFDLG1CQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzVELENBQUMsQ0FBQztTQUNELE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDL0MsTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUFHLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBRTFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUM7QUFFVyxRQUFBLFVBQVUsR0FBRyxDQUN4QixPQUFlLEVBQ2YsT0FBZSxFQUNmLGFBQXFCLEVBQ3JCLFVBQXlCLEVBQUUsRUFDM0IsRUFBRTtJQUNGLE1BQU0sS0FBSyxHQUNULGFBQWEsS0FBSyxNQUFNO1FBQ3RCLENBQUMsQ0FBQyw0QkFBNEI7UUFDOUIsQ0FBQyxDQUFDLGdCQUFnQixDQUFDO0lBQ3ZCLElBQUksS0FBSyxDQUFDO0lBQ1YsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDOUMsTUFBTSxRQUFRLEdBQUcsMEJBQWUsQ0FBQyxXQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3pFLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkIsa0JBQVUsQ0FBQyxtQkFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLGNBQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDakIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFpbkNvbnN0IH0gZnJvbSAnLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBkZWZpbmVFeHRlbnNpb24sIHJlYWRTeW5jIH0gZnJvbSAnLi9mcy11dGlscyc7XHJcbmltcG9ydCB7IGRpcm5hbWUsIGpvaW4gfSBmcm9tICdwYXRoJztcclxuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSBcIi4vbG9nZ2VyXCI7XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlSW1wb3J0cyA9IChjb250ZW50OiBzdHJpbmcsIGZpbGVUeXBlOiBzdHJpbmcpID0+IHtcclxuICBjb25zdCByZWdleCA9XHJcbiAgICBmaWxlVHlwZSA9PT0gJ3Njc3MnID8gbWFpbkNvbnN0LnNjc3NJbXBvcnRSZWdleCA6IG1haW5Db25zdC5zYXNzSW1wb3J0UmVnZXg7XHJcbiAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZShyZWdleCwgJycpO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFVuaXF1ZVN0eWxlRmlsZXMgPSAoXHJcbiAgZmlsZXM6IEFycmF5PHN0cmluZz4sXHJcbiAgZmlsZUV4dGVuc2lvbjogc3RyaW5nXHJcbikgPT4ge1xyXG4gIGNvbnN0IGltcG9ydHMgPSBmaWxlc1xyXG4gICAgLm1hcChmaWxlID0+IHtcclxuICAgICAgbG9nZ2VyKGZpbGUpO1xyXG4gICAgICBsb2dnZXIodHlwZW9mIGZpbGUpO1xyXG4gICAgICBsZXQgYmFzZURpciA9IGRpcm5hbWUoZmlsZSk7XHJcbiAgICAgIHJldHVybiBnZXRJbXBvcnRzKHJlYWRTeW5jKGZpbGUpLCBiYXNlRGlyLCBmaWxlRXh0ZW5zaW9uKTtcclxuICAgIH0pXHJcbiAgICAucmVkdWNlKChhY2MsIGN1cnIpID0+IGFjYy5jb25jYXQoY3VyciksIFtdKTtcclxuICBjb25zdCBhbGxJbXBvcnRzID0gWy4uLmltcG9ydHMsIC4uLmZpbGVzXTtcclxuXHJcbiAgcmV0dXJuIFsuLi5uZXcgU2V0KGFsbEltcG9ydHMpXTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRJbXBvcnRzID0gKFxyXG4gIGNvbnRlbnQ6IHN0cmluZyxcclxuICBiYXNlRGlyOiBzdHJpbmcsXHJcbiAgZmlsZUV4dGVuc2lvbjogc3RyaW5nLFxyXG4gIGltcG9ydHM6IEFycmF5PHN0cmluZz4gPSBbXVxyXG4pID0+IHtcclxuICBjb25zdCByZWdleCA9XHJcbiAgICBmaWxlRXh0ZW5zaW9uID09PSAnc2NzcydcclxuICAgICAgPyAvQGltcG9ydCBbJ1wiXShbXidcIl0rKVsnXCJdOy9nXHJcbiAgICAgIDogL0BpbXBvcnQgKFxcUyspL2c7XHJcbiAgbGV0IG1hdGNoO1xyXG4gIHdoaWxlICgobWF0Y2ggPSByZWdleC5leGVjKGNvbnRlbnQpKSAhPT0gbnVsbCkge1xyXG4gICAgY29uc3QgcGF0aEZpbGUgPSBkZWZpbmVFeHRlbnNpb24oam9pbihiYXNlRGlyLCBtYXRjaFsxXSksIGZpbGVFeHRlbnNpb24pO1xyXG4gICAgaW1wb3J0cy5wdXNoKHBhdGhGaWxlKTtcclxuICAgIGdldEltcG9ydHMocmVhZFN5bmMocGF0aEZpbGUpLCBkaXJuYW1lKHBhdGhGaWxlKSwgZmlsZUV4dGVuc2lvbiwgaW1wb3J0cyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gaW1wb3J0cztcclxufTtcclxuIl19