"use strict";
const fs_1 = require("fs");
const path_1 = require("path");
const globby = require("globby");
const string_decoder_1 = require("string_decoder");
const constants_1 = require("./helpers/constants");
const Sort_1 = require("./helpers/Sort");
const decoder = new string_decoder_1.StringDecoder('utf8');
const log = (info) => console.log(info);
const isFile = (f) => fs_1.statSync(f).isFile();
const removeImports = (content) => content.replace(constants_1.config.sassImportRegex, '');
const readSync = (filePath) => fs_1.readFileSync(filePath, 'utf8');
const getUniqueScss = (files) => {
    const scssImports = files
        .map(file => {
        let baseDir = path_1.dirname(file);
        return getImports(readSync(file), baseDir);
    })
        .reduce((acc, curr) => acc.concat(curr), []);
    const allImports = [...scssImports, ...files];
    return [...new Set(allImports)];
};
const getImports = (content, baseDir, imports = []) => {
    let match;
    while ((match = constants_1.config.sassImportRegex.exec(content)) !== null) {
        const pathFile = defineExtension(path_1.join(baseDir, match[1]));
        if (!imports.some(el => el === pathFile)) {
            imports.push(pathFile);
            getImports(readSync(pathFile), path_1.dirname(pathFile), imports);
        }
    }
    return imports;
};
const writeAsync = (path, content) => {
    return new Promise((res, rej) => {
        fs_1.writeFile(path_1.resolve(path), content, error => {
            if (error) {
                return rej(error);
            }
            return res(content);
        });
    });
};
const defineExtension = (filePath) => {
    const justScss = filePath + '.scss';
    if (isFile(justScss)) {
        return justScss;
    }
    throw new Error(`‚õî ‚õî ‚õî No file for module ${filePath}`);
};
module.exports = (mask, dest, sort = constants_1.config.defaultPriority) => {
    const fullPath = path_1.join(process.cwd());
    console.log(sort, '---------');
    const sortInstance = new Sort_1.Sort(sort);
    if (!mask || !mask.length) {
        throw new Error('‚õî ‚õî ‚õî Please provide the src for concat method');
    }
    const searchMask = Array.isArray(mask) ? mask : [mask];
    return globby(searchMask).then(paths => {
        const files = paths.map(file => path_1.join(fullPath, file));
        const unique = getUniqueScss(files);
        console.log(unique, '============');
        const sorted = sortInstance.sort(unique);
        console.log(sorted, '============');
        const buffers = sorted.map(file => {
            return fs_1.readFileSync(file);
        });
        const buff = Buffer.concat(buffers);
        let utfFormat = decoder.write(buff);
        if (dest) {
            log(`‚è≥ ‚è≥ ‚è≥ Saving result to ${dest}...`);
            const utf = removeImports(utfFormat);
            return writeAsync(dest, utf)
                .then(() => {
                log(`üöÄ üöÄ üöÄ SAVED SUCCESSFULLY \nPlease check ${dest}`);
                return utf;
            })
                .catch(reason => {
                log(`‚õî ‚õî ‚õî\n${reason}`);
            });
        }
        log('üìÅ Please provide destination option ');
        throw new Error('üìÅ Please provide destination option ');
    });
};
//# sourceMappingURL=data:application/json;base64,